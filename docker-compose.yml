# docker-compose.yml â€” Fabric (core + optional add-ons via profiles)
# Core services: redpanda, clickhouse, grafana
# Optional add-ons (profiles): kafka-ui(ui), flink(flink), kafka-connect(connect), mongodb(mongo)

services:
  redpanda:
    image: redpandadata/redpanda:v24.1.10
    command: [ "redpanda", "start", "--overprovisioned", "--smp=1", "--memory=1G", "--reserve-memory=0M", "--set", "redpanda.enable_rack_awareness=false", "--check=false" ]
    ports:
      - "9092:9092"   # Kafka API
      - "9644:9644"   # Admin API
    environment:
      - REDPANDA_AUTO_CREATE_TOPICS=true
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:24.7
    ports:
      - "9000:9000"   # native
      - "8123:8123"   # HTTP
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.6
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./dashboards:/var/lib/grafana/dashboards
    depends_on:
      - clickhouse
    restart: unless-stopped

  # ---- Kafka UI (optional) ----
  kafka-ui:
    profiles: ["ui"]
    image: provectuslabs/kafka-ui:latest
    container_name: adage-fabric-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "fabric"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "redpanda:9092"
      # KAFKA_CLUSTERS_0_ZOOKEEPER is not required for Redpanda
    depends_on:
      - redpanda
    restart: unless-stopped

  # ---- Apache Flink (optional) ----
  flink-jobmanager:
    profiles: ["flink"]
    image: flink:1.19-scala_2.12
    container_name: adage-fabric-flink-jm
    command: jobmanager
    ports:
      - "8081:8081" # Flink UI
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    depends_on:
      - redpanda
    restart: unless-stopped

  flink-taskmanager:
    profiles: ["flink"]
    image: flink:1.19-scala_2.12
    container_name: adage-fabric-flink-tm
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    depends_on:
      - flink-jobmanager
    restart: unless-stopped

  # ---- Kafka Connect (optional, Debezium included) ----
  kafka-connect:
    profiles: ["connect"]
    image: debezium/connect:2.7
    container_name: adage-fabric-kafka-connect
    ports:
      - "8083:8083" # Connect REST
    environment:
      BOOTSTRAP_SERVERS: "redpanda:9092"
      GROUP_ID: "connect-cluster"
      CONFIG_STORAGE_TOPIC: "__connect-configs"
      OFFSET_STORAGE_TOPIC: "__connect-offsets"
      STATUS_STORAGE_TOPIC: "__connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    depends_on:
      - redpanda
    restart: unless-stopped

  # ---- MongoDB (optional, replica set for CDC) ----
  mongodb:
    profiles: ["mongo"]
    image: mongo:6.0
    container_name: adage-fabric-mongodb
    command: ["mongod", "--replSet", "rs0", "--oplogSize", "128", "--bind_ip_all"]
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

volumes:
  mongo_data:
